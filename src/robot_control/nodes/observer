#!/usr/bin/env python

import rospy
from robot_control.observer_lib import *
from rospy import Subscriber, Publisher

from geometry_msgs.msg import Pose2D
from gazebo_msgs.msg import ModelStates
from tf.transformations import euler_from_quaternion as rpy_from_q

class IdealObsNode:
  ''' Ideal observer node

      Detail:
        - Declare a specific type of observer.
        - Subscribe to all necessary sensor topics.
        - Run the main estimation loop using the methods of the observer class,
          then publish the estimate.
  '''
  def __init__(self):
    rospy.init_node("observer")
    rospy.sleep(0.5)

    self.observer = IdealObs()
    self.sensor_readings = {}

    # Declare all sensor topics
    self.pose_sub = Subscriber("/gazebo/model_states",
                               ModelStates,
                               self.on_model_states)

    self.state_pub = Publisher("state",
                               Pose2D,
                               queue_size=10)

    self.run()

  def on_model_states(self, state):
    ''' Callback for sensor [Gazebo model state]
    '''
    idx = state.name.index("deedee")

    quaternion = (state.pose[idx].orientation.x,
                  state.pose[idx].orientation.y,
                  state.pose[idx].orientation.z,
                  state.pose[idx].orientation.w)
    rpy = rpy_from_q(quaternion)

    state = Pose2D(x=state.pose[idx].position.x,
                   y=state.pose[idx].position.y,
                   theta=rpy[2])

    self.sensor_readings["true_state"] = (state, rospy.Time().now().to_sec())

  def run(self):
    ''' Main loop
    '''
    rate = rospy.Rate(10)
    t_start = rospy.Time.now().to_sec()

    while not rospy.is_shutdown():
      if self.observer.check_readings(self.sensor_readings,
                                      rospy.Time.now().to_sec()):
        state = self.observer.estimate(self.sensor_readings)
        self.state_pub.publish(state)

      rate.sleep()


if __name__=="__main__":
  IdealObsNode()

